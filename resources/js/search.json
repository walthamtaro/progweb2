[[{"i":"manual-simplificado-para-iniciar-en-laravel","l":"Manual simplificado para iniciar en Laravel.","p":["Este no es un manual exhaustivo, para ello hay muchos tutoriales disponibles en línea. Este es una guía de partida para los temas más significativos en el manejo de este framework.","Los temas aquí vistos son los evaluados en el producto final de programación."]}],[{"i":"criterios-de-evaluación","l":"criterios de evaluación:","p":["Satisfacer la situación de uso planteada en el escenario (10 pts)","Controladores, modelos y vistas necesarios para su funcionamiento (10 pts)","Al menos un CRUD funcional (10 pts)","Uso de algún framework de estilos, tailwind, materialize, etc (10 pts)","Suficientes datos para comprobar el escenario (10 pts)","Mensajes de error, notificaciones personalizadas y validaciones de datos (10 pts)","Accesors para los datos que lo requieran. Al menos uno por modelo. (10 pts)","Policies de los modelos implicados. Uno por modelo. (10 pts)","Dos roles definidos: usuario común y administrador (10 pts)","Uso del faker para cargar datos (10 pts)"]}],[{"i":"el-modelo-vista-controlador-mvc","l":"El Modelo Vista Controlador (MVC)","p":["Es una forma de organizar y estructurar un proyecto de Software separando las múltiples lógicas que este contiene, en términos técnicos MVC es un patrón de arquitectura de Software. Las iniciales MVC significan Model View Controller que en español significan Modelo Vista Controlador.","Si bien hay varios patrones de arquitectura de Software, uno de los que se hizo más popular es el MVC por la rapidez en disponer de los elementos de cada sección, para acceder a los modelos y unirlos con la Vista por medio de los controladores, por otro lado MVC es muy simple para ordenar un proyecto y cumple muy bien su objetivo."]},{"i":"cómo-se-relacionan-en-laravel","l":"Cómo se \"relacionan\" en Laravel.","p":["La forma simple de describirlo sería: un contenido web (el texto, las imágenes, etc) está en una vista; el acceso a la vista está descrito en la ruta; la ruta indica si es un contenido estático que se accede directamente o si tiene contenido dinámico y requiere pasar por un controlador; el controlador describe las operaciones para manipular datos antes de ser mostrados en la vista y si estos datos vienen de una base de datos entonces el controlador llama al modelo; el modelo sirve como acceso a la tabla de la base de datos de la cuál se está requiriendo información."]},{"i":"una-página-estática","l":"Una página estática.","p":["Considere la página de inicio de laravel: el \"welcome\". Cuando el usuario accede a la raíz del sitio, el index tradicionalmente, la URL suele ser solo un \"slash\": / al final del nombre del sitio. Como esta página solo es la bienvenida no posee contenido dinámico que mostrar así que puede indicarse directamente en la RUTA que cargue la VISTA asociada.","La ruta entonces dice:","Ejemplo de una página estática"]},{"i":"una-página-dinámica","l":"Una página dinámica.","p":["Considere la página del dashboard. El dashboard es la página que veríamos una vez que iniciemos sesión en una aplicación. Supongamos que en este dashboard desde que entremos queremos ver cierta información que proviene de la base de datos. En consecuencia debemos pasar por un controlador.","La ruta entonces dice:","Ejemplo de página dinámica: dashboard","En términos humanos diría algo como: para acceder al dashboard que tiene el nombre dashboard ve al controlador TutoradoController busca el método dashboard, previo comprueba la autorización de acceso con auth.","El controlador tendría un código similar a este:","La línea \"$tutorado=Auth()->user();\" coloca en una variable local la información del usuario logueado. Estos métodos de Auth() y user() ya accedieron al modelo para obtener la información por lo que no necesitamos una consulta \"explícita\" para obtenerla. El \"return\" carga la vista \"dashboard\" adjuntando la variable \"$tutorado\" con la información concerniente al usuario que se ha logueado.","El método en comentario \"dd()\" sirve para visualizar el contenido de una variable sin tener que \"imprimir\" en una vista.","La vista carga una página html con la información final ya procesada. Las vistas usan la sintaxis BLADE para crear el contenido.","Ejemplo de sintaxis BLADE en una vista"]},{"l":"Video de referencia","p":["Entendiendo el MVC"]}],[{"l":"Accesors","p":["Los accesors de Laravel son una forma de dar presentación a los datos provenientes de un modelo cuando estos están almacenados de una forma poco comprensible, familiar o poco usable para el usuario.","Se definen en los modelos del proyecto. Pueden haber tantos como atributos o columnas de la tabla referenciada por el modelo.","Debes agregar el use del cast Attribute al modelo en el que vayas a crearlos.","La sintaxis es la de una función protegida asociada al atributo. El método make es un buen indicador de si hay algún error en la sintaxis como resultado de la versión de laravel utilizada. Este ejemplo está basado en Laravel 9, en otras versiones no será reconocido. Verifica siempre la versión en la que trabajas para usar la sintaxis adecuada.","La palabra get nos indica que es un accesor. Es el indicador de un getter, de la obtención de un dato de la base de datos y que será modificado para su visualización. La función debe nombrarse como el atributo al que referencia. Debe usar también el formato camel case en sustitución del underlying usado en el atributo.","camel case es una convención tipográfica en la que las palabras se juntan y la inicial de cada una se escribe en mayúscula para diferenciarlas, así nombreCompleto es un ejemplo de camel case.","El formato underlying de Laravel es la separación por guión bajo en las palabras que conforman el nombre de un campo de tabla en la base de datos. el ejemplo de user_id es underlying.","En este ejemplo se entiende que hay un atributo first_name en la base de datos en la tabla user y cuando el atributo sea utilizado en alguna vista la primera letra de la cadena almacenada se cambiará a mayúscula por el método ucfirst().","El ejemplo en el modelo:"]}],[{"l":"copia del atributo","p":["Es una modificación del tipo de dato que tiene asociado un atributo. Por ejemplo, un campo que guarda 0 y 1, quizás como tipo de dato entero o varchar, puede ser modificado por el cast para que se interprete como dato booleano y así utilizarlo directamente en condicionales.","La sintaxis de un cast","En este ejemplo se entiende que hay una columna llamada is_admin en la tabla que referencia este modelo y a la cuál se le cambia el tipo de dato como booleano, es decir, verdadero o falso.","El tipo de dato se modifica durante su lectura y uso no en la base de datos. Este cambio no es permanente"]}],[{"l":"Mutators","p":["Los mutators de Laravel son una forma de alterar el dato que se va a almacenar en la base de datos. Esto posiblemente porque la cadena original puede optimizarse. Por ejemplo, guardar 0 o 1 en lugar de activo o inactivo.","Se definen en los modelos del proyecto. Pueden haber tantos como atributos o columnas de la tabla referenciada por el modelo.","Debes agregar el use del cast Attribute al modelo en el que vayas a crearlos.","La sintaxis es la de una función protegida asociada al atributo. El método make es un buen indicador de si hay algún error en la sintaxis como resultado de la versión de laravel utilizada. Este ejemplo está basado en Laravel 9, en otras versiones no será reconocido. Verifica siempre la versión en la que trabajas para usar la sintaxis adecuada.","La palabra set nos indica que es un mutator. Es el indicador de un setter, de la modificación de un dato previo a su almacenamiento. La función debe nombrarse como el atributo al que referencia. Debe usar también el formato camel case en sustitución del underlying usado en el atributo.","camel case es una convención tipográfica en la que las palabras se juntan y la inicial de cada una se escribe en mayúscula para diferenciarlas, así nombreCompleto es un ejemplo de camel case.","El formato underlying de Laravel es la separación por guión bajo en las palabras que conforman el nombre de un campo de tabla en la base de datos. el ejemplo de user_id es underlying.","El mutator está descrito en la línea 5.","En este ejemplo se entiende que hay un atributo first_name en la base de datos en la tabla user y cuando el atributo vaya a almacenarse por resultado de una inserción o actualización se aplicará un cambio a minúsculas por el método strtolower().","Es de notarse que el get y set de un atributo se definen en la misma función protegida. Pueden estar ambos o solo alguno de ellos, según el diseño de su proyecto."]}],[{"l":"Artisan. La consola de Laravel","p":["Artisan es la interfaz de línea de comandos incluida en Laravel. (CLI, Command line interface).","Puedes usar el clásico CMD o la terminal que viene integrada en VSCODE para acceder al Artisan.","Nueva terminal en VSCODE","Puedes ver la lista de comandos disponibles con php artisan list","Lista de comandos disponibles"]},{"i":"en-la-consola-artisan","l":"En la consola Artisan...","p":["Lista de comandos disponibles.","Muestra las rutas disponibles en el proyecto.","Crea un controlador.","Crea un controlador con \"recursos\" asociados. Estos recursos son los métodos para hacer un CRUD.","Crea un controlador con un modelo asociado.","Crea un modelo."]}],[{"l":"Controladores en Laravel","p":["Los Controladores son clases que llevan la lógica de la aplicación.","Se ubican en la ruta app/http/controllers","Ubicación de los archivos de controlador"]},{"i":"en-la-consola-artisan","l":"En la consola Artisan...","p":["Abre una consola. Puedes usar el clásico CMD o la que viene integrada en VSCODE.","Crea un controlador","Crea un controlador con \"recursos\" asociados. Estos recursos son los métodos para hacer un CRUD.","Crea un controlador con un modelo asociado."]},{"i":"convenciones","l":"Convenciones...","p":["El nombre siempre inicia en mayúsculas. Ej. AnecdotaController.","Incluye siempre el sufijo \"Controller\" aunque no es obligatorio.","Puedes tener los controladores que desees, no están sujetos a tablas como los modelos.","Al crearlo con un \"resource\" no es necesario usar todos los métodos creados.","Aunque puedes usar los nombres que quieras para las acciones de un CRUD, deberías usar los sugeridos."]}],[{"l":"Modelos en Laravel","p":["Los modelos son representaciones de las tablas de la base de datos asociada al proyecto.","Se ubican en la ruta app/models","Ubicación de los archivos de modelos"]},{"i":"en-la-consola-artisan","l":"En la consola Artisan...","p":["Crea un modelo"]},{"i":"convenciones","l":"Convenciones...","p":["El nombre siempre inicia en mayúsculas. Ej. Anecdota","Es el nombre en singular de la tabla. En la BD es en plural.","Esta diseñado para el inglés, donde el plurar solo es agregar la \"s\".","Funcionará en casos como: modelo anécdota, tabla anécdotas","Fallará en casos como: modelo perfil, tabla perfiles","Para que no falle usarías modelo perfil, tabla perfils","Lo ideal para no \"escribir mal\" sería usar los nombres en inglés.","Usa nombres en inglés para no complicarte con los plurales.","Puedes eliminarlo solo borrando el archivo."]}],[{"l":"Rutas en Laravel","p":["Las rutas son las URL por las cuáles se \"mueve\" la aplicación. Para cada acción del sitio hay una URL asociada. Esta debe estar declarada en las rutas.","Se ubican en la ruta routes/web","Ubicación de los archivos de modelos"]},{"i":"en-la-consola-artisan","l":"En la consola Artisan...","p":["Las rutas no tienen instrucción para crearse. En el fichero web se declaran las URL que requiere el proyecto."]},{"i":"convenciones","l":"Convenciones...","p":["Si un contenido de la aplicación es estático puede indicarse directamente en la ruta. Ej. http://localhost/sugerencias. Entendiendo que las sugerencias son un listado de texto estático.","En caso de que la url deba cargar información dinámica deberá pasa por un controlador. Ej. http://localhost/anecdota/23. En este caso la anécdota dependerá del valor numérico que esté en la URL."]}],[{"l":"Vistas en Laravel","p":["Las vistas son las páginas visibles del proyecto.","Se ubican en la ruta resources/views","Ubicación de los archivos de modelos"]},{"i":"en-la-consola-artisan","l":"En la consola Artisan...","p":["Las vistas no tienen instrucción para crearse. En el directorio de las vistas creas un archivo con extensión .blade.php para que funcione."]},{"i":"convenciones","l":"Convenciones...","p":["La extensión es .blade.php para que se reconozca como una vista.","Por defecto la vista de inicio es el welcome.blade.php.","En la estructura por defecto de Laravel hay un directorio en resources/views/layouts/ que almacena las vistas de plantilla para un proyecto.","Los nombres pueden ser los que consideres adecuados usando el formato: CadaPalabraComienzaEnMayuscula.blade.php.","Puedes eliminarlo solo borrando el archivo."]}],[{"l":"Gates","p":["Es una funcionalidad para aplicar autorización en Laravel. Sencillamente indica si un usuario tiene el permiso para realizar una operación/acción en la aplicación.","Se definen en el boot del App\\Providers\\AuthServiceProvider usando el facade:","Siempre utiliza una instancia del usuario que está registrado y opcionalmente puede recibir argumentos adicionales.","La sintaxis de un gate:","En este ejemplo se crea una gate nombrada update-post que recibe una instancia del modelo user y del modelo post. Regresa una comprobación del id del usuario ($user->id) que debe coincidir de forma idéntica (===) con el id del usuario registrado en el post ($post->user_id). Si estos coinciden entonces se puede realizar lo que diga el método en el que es llamado de lo contrario se negará la acción."]},{"l":"Código completo del AuthServiceProvider"},{"l":"En el controlador","p":["El gate ya está creado ahora debe ser utilizado en el método de controlador donde sea necesario. En este ejemplo iría en el método asociado al update. Hay que usar el facade del Gate.","Entre las líneas 3 a 5 está el uso del gate update-post al cuál solo se le envía el argumento $post porque el del usuario lo recibe automáticamente.","En este ejemplo se entiende que al acceder al método update del controlador asociado al modelo post primero se revisa si no se permite el 'update-post' a este usuario. En ese caso se llama al método Abort() y se indica el código de error a mostrar que es el 403 (acceso prohibido).","Código completo del controlador:"]}],[{"l":"Middleware","p":["Los middleware son como puertas intermedias que permiten o niegan el acceso a un recurso. Formalmente son:","Middleware provide a convenient mechanism for inspecting and filtering HTTP requests entering your application","El middleware más notorio es el del auth que redirecciona al login a los usuarios que no están autentificados, es decir, que no se han logueado en el sistema.","La instrucción en Artisan para crear un middleware:","El archivo resultante se almacena en app/Http/Middleware.","La sintaxis del middleware:","En este ejemplo se entiende que se creó un middleware con el nombre EnsureTokenIsValid que se asegura de que un token sea válido. El método handle($request, Closure $next) recibe la petición y tiene el recurso al cuál dirigirse si se cruza el middleware. En la línea 18 se comprueba si el token que viene del formulario ($request->input) es distinto al que está alojado en la cadena _ my-secret-token; de ser así se redirecciona al home del proyecto y sino se continúa a donde apuntaba el recurso ($next($request))."]},{"l":"Registro del middleware","p":["El middleware ya se creó ahora debe registrarse en el kernel para su uso. Si el middleware va a utilizarse en cada petición HTTP, es decir, cada cambio de página, deberá registrarse globalmente de lo contrario se indicará en las rutas donde se requiera.","Para uso global, en cada petición de HTTP:","Para uso en las rutas deberá asignarse un nombre, como el del ejemplo auth:","En el caso de las rutas del archivo routes\\web se usa de la siguiente forma:"]}],[{"l":"El CRUD en un controlador","p":["CRUD (Create, Read, Update, Delete) es un acrónimo para las maneras en las que se puede operar sobre información almacenada. Es un nemónico para las cuatro funciones del almacenamiento persistente. CRUD usualmente se refiere a operaciones llevadas a cabo en una base de datos o un almácen de datos, pero también pude aplicar a funciones de un nivel superior de una aplicación como soft deletes donde la información no es realmente eliminada, sino es marcada como eliminada a tráves de un estatus.","Referencia: CRUD"]},{"i":"en-la-consola-artisan","l":"En la consola Artisan...","p":["El CRUD está asociado a una tabla de la base de datos. Cree el modelo que la represente.","Un controlador gestionará las acciones del CRUD. Agrega --resource para crear los métodos por defecto para un CRUD.","Utiliza route:list para ver las rutas que se generaron con el controlador. Si no las ves, aún no las has definido en el archivo de rutas."]},{"i":"en-el-controlador","l":"En el controlador...","p":["La instrucción anterior genera los métodos: index(), create(), store(), show(), edit(), update() y destroy(). Cada una tiene una funcionalidad para el CRUD.","Index(). Carga la página desde donde esperaríamos encontrar las acciones del CRUD. Estas acciones pueden estar en otras páginas tambien, todo depende del diseño. También funciona como la página maestro en una plantilla del tipo maestro-detalle.","create(). Esta página carga el formulario para inserciones en la base de datos.","store(). Aquí es a donde apunta el action del formulario create(). En esta se ejecuta la inserción.","show(). Esta página carga la información de un registro de la base de datos asociado a este CRUD. Es la página detalle de la plantilla maestro-detalle.","edit(). Carga el formulario para la edición de un registro.","update(). Realiza la operación con la base de datos para la actualización. Es el action del formulario edit().","destroy(). Elimina un registro.","No es necesario usar todas, de nuevo, dependerá del diseño. Tampoco es necesario usar el --resource al crear el controlador, puedes escribirlo en el archivo generado. Tampoco es necesario que se llamen igual, pero es la convención."]},{"i":"en-la-ruta","l":"En la ruta...","p":["/anecdotas","/anecdotas/","/anecdotas//edit","/anecdotas/create","Action","anecdotas.create","anecdotas.destroy","anecdotas.edit","anecdotas.index","anecdotas.show","anecdotas.store","anecdotas.update","create","DELETE","destroy","edit","El \"Action\" corresponde al método del controlador asociado a la URI.","El \"route name\" es la forma corta de usar la URI en los enlaces.","El \"verb\" es el método asociado a la URL, que típicamente son los GET y POST más PUT, PATCH para insertar y editar respetivamente, mientras que DELETE será para las eliminaciones.","Es posible usar otro nombre para las URL, por ejemplo 'historias' en lugar de 'anecdotas', pero en la mayoría de los casos cambiarlo sería confuso. Las URL's serían del tipo /historias/. El controlador sería el mismo.","GET","index","Las partes entre llaves \"\" indican que ese es un dato dinámico. Ej. /anecdotas/ en la aplicación en uso sería algo como /anecdotas/15 donde se sustituye por el ID de la anécdota.","Las URL's que se generarían serían las siguientes:","Note que 'Anecdotas' está en plural, y AnecdotaController en singular. La razón es que tendremos URL's en las que queremos \"ver\" un solo elemento como en el SHOW donde la URL sería /anecdotas/. Es solo una convención no obligatoria.","POST","PUT/PATCH","Route Name","show","store","Todos los métodos del controlador generan una ruta. Para no indicar una por una las que forman parte del resource, utilice:","update","URI","Verb"]},{"i":"convenciones","l":"Convenciones...","p":["Usar --resource genera los métodos del CRUD pero no es obligatorio.","Los nombres de los métodos no son obligatorios.","No es necesario utilizarlos todos.","Los formularios deberán llevar la protección CSRF. Ver CSRF protection del manual de Laravel para los detalles."]},{"l":"Videos de referencia para realizar un CRUD","p":["Idea del proyecto","La base de datos","La configuración inicial","Entendiendo el MVC","Creando un controlador con RESOURCE","Sobre los modelos","Sobre los controladores","Sobre las vistas"]}],[{"i":"el-método-index","l":"El método index()","p":["Es la página de inicio del controlador. Para un controlador llamado AnecdotaController el index podría ser una ruta como localhost/anecdotas/ donde anecdotas es el nombre del controlador y el slash es el indicador de que estamos en el index. Si fue creado con resource la URL sería:","Verb","URI","Action","Route Name","GET","/anecdotas","index","anecdotas.index","Esta página podría hacer muchas cosas. Si es el usuario administrador del sitio podría ser la lista de todas las anécdotas disponibles (página maestro) con opciones de edición y eliminación mientras que si es un usuario genérico como el alumno sería la lista de sus anécdotas. También podría ser la lista completa de anécdotas pero solo con opciones de visualización."]},{"i":"en-el-controlador","l":"En el controlador...","p":["En este ejemplo el index será una página maestro que mostrará todas las anécdotas registradas en la tabla.","La línea 5 utiliza un método de ELOQUENT de Laravel. El método all() regresa todos los registros de la tabla. Revise la referencia para más detalles.","Una vez con los datos en la variable local lo enviamos a la vista (línea 7) correspondiente."]},{"i":"en-el-modelo","l":"En el modelo...","p":["La acción que usa el modelo está en la línea 5 con el uso del método all() de Eloquent."]},{"i":"en-la-vista","l":"En la vista...","p":["La vista está en el directorio anécdotas con el fichero anecdotas en el subdirectorio de las views. Esto por usar la sintaxis \"directorio.fichero\" que puede verse en la línea 7 con 'anecdotas.anecdotas'.","En un código muy simple, el resultado es:","Como el resultado es un array debe recorrerse usando el método @foreach y @endforeach para indicar el bloque que se repetirá. El formato de doble llave {{}} indica que se mostrará un dato dinámico proveniente de la variable asociada a la vista. Esto es sintaxis BLADE. Ver referencia para más detalles."]},{"i":"en-la-ruta","l":"En la ruta...","p":["No se indica nada más que la ruta al resource una sola vez:"]},{"l":"Resultado","p":["El resultado final al acceder a la URL:","Vista del index de Anécdotas"]}],[{"i":"el-método-create","l":"El método create()","p":["Es la página con el formulario de registro. Si fue creado con resource la URL sería:","Verb","URI","Action","Route Name","GET","/anecdotas/create","create","anecdotas.create"]},{"i":"en-el-controlador","l":"En el controlador...","p":["En este ejemplo el create tendrá un formulario básico para registrar una anécdota. Se puede incluir información dinámica en la vista resultante pero no es forzoso. Todo dependerá del diseño. En este caso solo mostraremos un formulario.","No hay más acciones que la carga de la vista correspondiente."]},{"i":"en-el-modelo","l":"En el modelo...","p":["No se requiere ninguna acción pues no hay información dinámica."]},{"i":"en-la-vista","l":"En la vista...","p":["La vista está en el directorio anécdotas con el fichero create en el subdirectorio de las views. Esto por usar la sintaxis \"directorio.fichero\" que puede verse en la línea 4 con 'anecdotas.create'.","En un código muy simple, el resultado es:","En este caso el action apunta al método store() que es el que guardará en la base de datos el envío realizado en este formulario.","El action utiliza la URI asociada, pero también puede usarse el route name a través del método route().","La directiva @csrf es el token de seguridad. Revise el CSRF Protection para más información. Con esta línea se provee de seguridad en el envío."]},{"i":"en-la-ruta","l":"En la ruta...","p":["No se indica nada más que la ruta al resource una sola vez:"]},{"l":"Resultado","p":["El resultado final al acceder a la URL:","Vista del create de Anécdotas"]}],[{"i":"el-método-store","l":"El método store()","p":["Es la página que guarda un registro en la base de datos. Si fue creado con resource la URL sería:","Verb","URI","Action","Route Name","POST","/anecdotas","store","anecdotas.store","Esta URL requiere un envío de datos por método POST para funcionar."]},{"i":"en-el-controlador","l":"En el controlador...","p":["En este ejemplo el store() registrará una anécdota en la tabla anécdotas.","Este ejemplo NO VALIDA los datos de la inserción. En otro ejemplo se utilizará la validación.","El método recibe el objeto request con los datos enviados por el método POST del formulario create. Se crea un objeto basado en el modelo de la tabla anécdotas (línea 4) y se adjuntan a los campos editables del modelo los datos recibidos en el request. No tienen que llamarse igual (línea 6). En la línea 7 se usa un dato que no viene del formulario ya que es el ID del usuario que está haciendo la inserción y ese dato lo tenemos desde su logueo. Finalmente se aplica el método save() para aplicar la inserción.","Inclusión de created_at y updated_at","La tabla en la base de datos debe tener los campos created_at y updated_at del tipo timestamp para que funcione esta inserción."]},{"i":"en-el-modelo","l":"En el modelo...","p":["La acción que usa el modelo está en la línea 4 con la acción new Anecdota."]},{"i":"en-la-vista","l":"En la vista...","p":["Esta inserción comunmente no genera una página pues solo diría algo como \"registro exitoso\". Lo común entonces es que se redireccione a una vista existente que confirme la inserción. Un lugar común sería volver al index o al create si queremos ver el resultado o seguir registrando información adjuntando información para dar mensajes de éxito. Todo depende del diseño.","El método with() adjunta un data flash que es un dato que solo vive en la siguiente página que se carga. Se utiliza para mandar mensajes de éxito y error comúnmente. Lleva un nombre y un mensaje.","Este mensaje en la redirección aún no se ve en la vista del index. En otro ejemplo se adjuntará."]},{"i":"en-la-ruta","l":"En la ruta...","p":["No se indica nada más que la ruta al resource una sola vez:"]},{"l":"Resultado","p":["El resultado final en la base de datos:","Nuevo registro en la base de datos"]}],[{"i":"el-método-show","l":"El método show()","p":["Es la página que muestra un registro en particular. Si fue creado con resource la URL sería:","Verb","URI","Action","Route Name","GET","/anecdotas/","show","anecdotas.show","Esta URL requiere un dato para cargar. Esto se indica con ."]},{"i":"en-el-controlador","l":"En el controlador...","p":["En este ejemplo el show mostrará una anécdota en particular.","La línea 4 utiliza un método de ELOQUENT de Laravel. El método where() nos permite aplicar un criterio de búsqueda y selección. Como este método regresa un arreglo pero sabemos que solo tiene un único registro aplicamos el método first() para obtener el registro único en formato JSON. Para más información ver la referencia.","Una vez con los datos en la variable local lo enviamos a la vista (línea 6) correspondiente.","Con un método where() obtienes un objeto con el arreglo de datos. Para que sea legible en la vista hay que aplicar un método get() que regrese únicamente el arreglo. Utilice también first() o last() si solo necesita el primer o último registro del array.","El método find() es más corto para hacer un show. La instrucción:"]},{"i":"en-el-modelo","l":"En el modelo...","p":["La acción que usa el modelo está en la línea 4 con el uso del método where() y first() de Eloquent."]},{"i":"en-la-vista","l":"En la vista...","p":["La vista está en el directorio anécdotas con el fichero show en el subdirectorio de las views. Esto por usar la sintaxis \"directorio.fichero\" que puede verse en la línea 6 con 'anecdotas.show'.","En un código muy simple, el resultado es:","La variable adjunta a la vista no es un arreglo, es un objeto JSON por lo cuál no usamos ciclo y accedemos directamente a cada campo del objeto. Cada campo se llama igual que como se llama la columna de la tabla en la base de datos. Esto es sintaxis BLADE. Ver referencia para más detalles."]},{"i":"en-la-ruta","l":"En la ruta...","p":["No se indica nada más que la ruta al resource una sola vez:"]},{"l":"Resultado","p":["El resultado final al acceder a la URL:","Vista del show de Anécdotas"]}],[{"i":"el-método-edit","l":"El método edit()","p":["Es la página que carga el formulario de edición de un registro. Debe haber un registro existente para que esta página funcione. Si fue creado con resource la URL sería:","Verb","URI","Action","Route Name","GET","/anecdotas//edit","edit","anecdotas.edit","Esta URL requiere un dato para cargar. Esto se indica con ."]},{"i":"en-el-controlador","l":"En el controlador...","p":["En este ejemplo el edit mostrará un formulario con los datos precargados de la anécdota que se editará.","El edit es básicamente el método show y create juntos. Debe primero encontrarse el registro y luego cargarlo en el formulario que es igual al de inserción salvo que el diseño sugiera algo distinto.","En este ejemplo en los parámetros que recibe la función se ejecuta un find(). El id usado para la consulta está en la URL. De ahí que se carga solo la vista con el registro."]},{"i":"en-el-modelo","l":"En el modelo...","p":["La acción que usa el modelo está en los parámetros de entrada de la función (línea 1)."]},{"i":"en-la-vista","l":"En la vista...","p":["La vista está en el directorio anécdotas con el fichero edit en el subdirectorio de las views. Esto por usar la sintaxis \"directorio.fichero\" que puede verse en la línea 6 con 'anecdotas.edit'.","En un código muy simple, el resultado es:","En esta vista lo que cambia con respecto al create es el atributo value que se alimenta con los datos de la variable enviada por el controlador."]},{"i":"en-la-ruta","l":"En la ruta...","p":["No se indica nada más que la ruta al resource una sola vez:"]},{"l":"Resultado","p":["El resultado final al acceder a la URL:","Vista del edit de Anécdotas"]}],[{"i":"el-método-update","l":"El método update()","p":["Es la página que actualiza un registro en particular. Si fue creado con resource la URL sería:","Verb","URI","Action","Route Name","PUT/PATCH","/anecdotas/","update","anecdotas.update","Esta URL requiere un id y la recepción de un request de formulario para funcionar. Esto se indica con y el método PUT."]},{"i":"en-el-controlador","l":"En el controlador...","p":["En este ejemplo el update modificará el título y/o la historia de la anécdota.","Se recibe el request del formulario y el ID del registro a actualizar. Se aplica un find para encontrar el registro en la base de datos y se carga el objeto del modelo Anecdota. Se asignan los nuevos valores y se aplica un save() igual que en el método store. Lo que cambia es que primero se eligió sobre qué registro existente se guardará de nuevo. Finalmente se reenvía al index del controlador."]},{"i":"en-el-modelo","l":"En el modelo...","p":["La acción que usa el modelo está en la línea 4 con el uso del método find() de Eloquent."]},{"i":"en-la-vista","l":"En la vista...","p":["Esta actualización comunmente no genera una página pues solo diría algo como \"actualización exitosa\". Lo común entonces es que se redireccione a una vista existente que confirme el cambio. Un lugar común sería volver al index para ver el resultado. Todo depende del diseño."]},{"i":"en-la-ruta","l":"En la ruta...","p":["No se indica nada más que la ruta al resource una sola vez:"]},{"l":"Resultado","p":["El resultado final en la base de datos:","Registro modificado en la base de datos"]}],[{"i":"el-método-destroy","l":"El método destroy()","p":["Es la página que muestra un registro en particular. Si fue creado con resource la URL sería:","Verb","URI","Action","Route Name","DELETE","/anecdotas/","destroy","anecdotas.destroy","Esta URL requiere un dato para funcionar. Esto se indica con .","Esta operación no se deshace."]},{"i":"en-el-controlador","l":"En el controlador...","p":["En este ejemplo el destroy eliminará el registro seleccionado. Esta acción debe tener una confirmación previa para evitar una eliminación por error. En este ejemplo esa confirmación no se aplica.","Al igual que el show, edit y update se requiere el ID del registro a eliminar. Se aplica un find y se aplica el método delete().","Al igual que al actualizar no se crea una vista solo para confirmar sino que se redirige a una vista existente y se publica un mensaje."]},{"i":"en-el-modelo","l":"En el modelo...","p":["La acción que usa el modelo está en la línea 4 con el uso del método find() y el método delete() de Eloquent."]},{"i":"en-la-vista","l":"En la vista...","p":["No hay una vista en concreto para la eliminación. Lo común es que sea un botón en la vista maestro junto a opciones de ver y editar, o bien, en un show del registro donde se puede decidir si se elimina o no. En otras palabras, es una modificación a las vistas index y show y/o cualquier otra que se haya diseñado para ello.","En este ejemplo se agrega como un botón en la vista index.","Vista del botón ELIMINAR de Anécdotas","En un código muy simple, el resultado es:","El cambio está entre las líneas 19 y 23. Como el método destroy() utiliza un método delete para confirmar la solicitud esta debe hacerse a través de un formulario. Se incluye el @csrf cada vez que se envíe información por formularios para la seguridad y el @method('DELETE') para cambiar el método POST por el DELETE.","Importante incluir una confirmación de eliminación antes de aplicar este form para evitar errores."]},{"i":"en-la-ruta","l":"En la ruta...","p":["No se indica nada más que la ruta al resource una sola vez:"]},{"l":"Resultado","p":["El resultado final no es visible propiamente, ya que veremos la vista inicial pero sin un registro menos."]}],[{"l":"Asignando roles al user","p":["Crear los roles y asignar los permisos son el principio. Hay que asignar al usuario (user) el rol que tiene o el permiso que se le concede.","Primero el modelo user debe usar el trait llamado HasRoles. Note que va en dos lugares:","Una ves asignado el trait al modelo user podrá asignar el rol o permiso en donde vea conveniente. En este ejemplo se asigna el rol tutorado al momento del registro, entendiendo que solo se registran alumnos que serán tutorados. En otro caso se puede hacer un CRUD de usuarios a los que manualmente se les asigne el rol.","En la base de datos se verá el cambio en la tabla model_has_roles ya que se asignó un rol. Si se asigna un permiso solamente estaría en la tabla model_has_permissions."]}],[{"l":"roles de usuario con SPATIE","p":["El control de roles es una funcionalidad importante en una aplicación con diferentes tipos de usuario. Asignar roles como editor, revisor, tutor entre otros y definir sus permisos como edición o eliminación de contenido forman parte de este control."]},{"l":"Usando SPATIE","p":["Existen muchas formas de aplicar control de roles de usuario pero una librería muy utilizada es la de spatie. La generación de roles y permisos es muy sencillo desde esta herramienta.","Consulte la documentación de spatie para todas sus funcionalidades.","Para instalar spatie:"]},{"l":"Creando roles y permisos","p":["Para crear roles y permisos podemos usar eloquent con estas instrucciones:","Crear un rol. En este ejemplo se crea el rol writer para web. web es el archivo de rutas que usamos en Laravel.","Crea un permiso. En este ejemplo se crea el permiso edit articles para web.","Crea un rol con permisos asignados. En este ejemplo se crea el rol writer para web con dos permisos: create articles y edit articles. Esta última es la forma más rápida de asignar rol y permiso si ya sabes cuáles son. Puedes repetir la instrucción y actualizarás el registro de roles y permisos, no generará otro nuevo.","Por último, para ver los permisos y roles creados:"]},{"l":"Super usuario","p":["Es común tener un super usuario en la base de datos que tenga acceso a todo y todos los permisos. Esto sería un gate de Laravel. Ver el tema en la sección correspondiente.","En este caso se crea el gate correspondiente y el rol. En este caso se llama super-admin. Al rol super-admin no se le asigna ningún permiso porque el gate se los acepta todos.","El gate"]},{"l":"Ejemplo","p":["En estas imágenes puedes ver que tablas se crean con la librería, las instruciones en eloquent usadas y el resultado generado.","Las instrucciones en eloquent en el proyecto:","Línea 1 instala spatie.","Línea 2 publica el servicio para que sea automático su uso en el proyecto.","Línea 3 Limpia la caché para su correcto funcionamiento.","Línea 4 corre la migración para que las tables se creen en la base de datos.","Línea 5 Crea el rol tutor. No es necesario indicar web.","Línea 6 Crea el permiso editar tutoria. No es necesario indicar web.","Línea 7 Crea el rol tutor para web con los permisos ver tutoria, crear tutoria, editar tutoria y eliminar tutoria. En este formato debe indicarse web o tendrá inconsistencias.","Línea 8 Muestra los roles y permisos asignados.","Tablas generadas con spatie","Eloquent. Roles y permisos para el tutor","Tabla roles","Tabla permisos","Tabla roles y permisos"]}],[{"i":"qué-es-blade","l":"¿Qué es Blade?","p":["Blade es un motor de plantillas simple y a la vez poderoso proporcionado por Laravel. A diferencia de otros motores de plantillas populares de PHP, Blade no te impide utilizar código PHP plano en tus vistas. De hecho, todas las vistas de Blade son compiladas en código PHP plano y almacenadas en caché hasta que sean modificadas, lo que significa que Blade no añade sobrecarga a tu aplicación. Los archivos de las vistas de Blade tienen la extensión .blade.php y son usualmente almacenados en el directorio resources/views.","Fuente: Plantillas Blade – Documentación de Laravel 6","Las plantillas en Blade pueden diseñarse usando el formato de componentes o herencia. En el caso de los componentes se construyen fragmentos reutilizables en las vistas mientras que en el caso de herencia se usa un documento base al que se agrega nuevo contenido."]},{"i":"diseñando-plantilla-con-herencia","l":"Diseñando plantilla con herencia.","p":["Es la forma primaria en que Laravel construye plantillas.","En la referencia de plantillas blade en Laravel puede verse el ejemplo anterior. Considere:","El @section() indica una sección dinámica en la plantilla. Esta sección puede cargar otro archivo blade en ese espacio. El @yield() es algo similar a un campo de dato, en la cuál se carga directamente un contenido. La diferencia sería que yield es el valor del dato que se inserta y section es todo un fragmento de contenidos. En el ejemplo la línea 5 tiene un yield para sustituir el título de la página, un simple texto, mientras que la línea 8 tiene un section para cargar un menú de navegación que es una lista de links. En la línea 10 está la directiva @show() que hace visible la sección.","Dicho de otra forma, el section tiene la estructura del fragmento de contenido que se inserta. El archivo que es insertado indica su propia estructura. En el caso de yield la estructura es definida en el layout así que en el archivo que es insertado no necesariamente indica que es el fragmento.","El ejemplo anterior es el contenido de la plantilla blade","Una vez creada la plantilla blade se deben crear entonces las vistas del proyecto que se deben basar en dicha plantilla. En ese caso se utiliza la directiva @extends() que indica que la vista que está creándose es una extensión de otra vista, la que es la plantilla. En otras palabras, la página que crees ahora deberá ser hijo de la página anterior para que herede el diseño.","En la página hijo iría el contenido particular de la página. Todas las secciones se indican como @section() ya sea un yield o un section lo que se esté referenciando. En el ejemplo anterior la línea 3 realiza la extensión para indicar que esta página se basa en el archivo app que está en el directorio layouts dentro de la carpeta views. La línea 5 muestra cómo se carga contenido en un yield, indicando cuál es el nombre del yield primero y segundo el valor que se le quiere asignar. En la línea 7 y hasta la 11 se indica una sección que es nombrada sidebar en la plantilla base. En este fragmento delimitado por @section() y @endsection() se puede colocar todo el código HTML y directivas Blade que se deseen. La línea 8 con la directiva @parent() indica que lo que hubiese escrito en la plantilla base con dicho nombre será sobreescrito por lo que hay en esta sección."]},{"l":"Ejemplo de plantilla","p":["Usando el ejemplo del anecdotario diseñaremos una plantilla personalizada.","El código anterior es muy básico pero ilustra la idea de una plantilla: la cabecera de la plantilla de ejemplo de laravel se conserva para utilizar tailwind css como herramienta de estilo y el body completo es sustituido por una sección llamada contenido. En este caso la página que tenga el contenido deberá incluir toda la estructura de etiquetas correspondientes.","El mismo resultado se conseguiría con yield solo que la plantilla debiera indicar la estructura en la cuál se está guardando el contenido. Algo así:","Y la página hijo no tendría cambios:","El resultado final sería:","Vista de la página hijo creada por herencia"]}]]